@model X.PagedList.IPagedList<project.ViewModels.ProductVM>
@using X.PagedList.Mvc.Core;
@{
    ViewData["Title"] = "Store";
}

<!-- SECTION -->
<div class="section">
    <!-- container -->
    <div class="container">
        <!-- row -->
        <div class="row">
            <!-- ASIDE -->
            <div id="aside" class="col-md-3">
                @await Component.InvokeAsync("CategoryStoreList")
                <!-- aside Widget -->
                <div class="aside">
                    <h3 class="aside-title">Price</h3>
                    <div class="price-filter">
                        <div id="price-slider"></div>
                        <div class="input-number price-min">
                            <input id="price-min" type="number">
                            <span class="qty-up">+</span>
                            <span class="qty-down">-</span>
                        </div>
                        <span>-</span>
                        <div class="input-number price-max">
                            <input id="price-max" type="number">
                            <span class="qty-up">+</span>
                            <span class="qty-down">-</span>
                        </div>
                    </div>
                </div>
                <!-- /aside Widget -->
                <!-- aside Widget -->
                @await Component.InvokeAsync("TopSellingStore")
                <!-- /aside Widget -->
            </div>
            <!-- /ASIDE -->
            <!-- STORE -->
            <div id="store" class="col-md-9">
                <!-- store top filter -->
                <div class="store-filter clearfix">
                    <div class="store-sort">
                        <label>
                            Sort By:
                            <select class="input-select" onchange="location.href = this.value;">
                                <!option value="@Url.Action("Store", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })" @(ViewBag.CurrentSort == "name_desc" ? "selected" : "")>Name</!option>
                                <!option value="@Url.Action("Store", new { sortOrder = ViewBag.PriceSortParm, currentFilter = ViewBag.CurrentFilter })" @(ViewBag.CurrentSort == "Price" ? "selected" : "")>Price</!option>
                            </select>
                        </label>

                        <label>
                            Show:
                            <select id="pageSizeSelect" class="input-select">
                                <!option value="6" @(ViewBag.PageSize == 6 ? "selected" : "")>6</!option>
                                <!option value="9" @(ViewBag.PageSize == 9 ? "selected" : "")>9</!option>
                                <!option value="12" @(ViewBag.PageSize == 12 ? "selected" : "")>12</!option>
                            </select>
                        </label>

                        <label>
                            @using (Html.BeginForm("Store", "Products", FormMethod.Get))
                            {
                                <p>
                                    Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
                                    <input type="submit" value="Search" />
                                </p>
                            }
                        </label>
                    </div>
                </div>
                <!-- /store top filter -->
                <!-- store products -->
                <div class="row">
                    <!-- product -->
                    @{
                        int count = 0;
                    }
                    @foreach (var item in Model)
                    {
                        <div class="col-md-4 col-xs-6">
                            <div class="product">
                                <div class="product-img">
                                    <img src="@item.imgUrl" alt="@item.Name">
                                </div>
                                <div class="product-body">
                                    <p class="product-category">@item.CategoryName</p>
                                    <h3 class="product-name"><a href="#">@item.Name</a></h3>
                                    <h4 class="product-price">@item.Price.ToString("#,##0") VND<del class="product-old-price">@($"{(item.Price + (item.Price * 30) / 100).ToString("#,##0")} VND")</del></h4>
                                    <div class="product-btns">
                                        <button class="quick-view"><i class="fa fa-eye"></i><span class="tooltipp">quick view</span></button>
                                    </div>
                                </div>
                                <div class="add-to-cart">
                                    <button class="add-to-cart-btn"><i class="fa fa-shopping-cart"></i> add to cart</button>
                                </div>
                            </div>
                        </div>
                        count++;
                        <div class="clearfix visible-sm visible-xs"></div>
                        @if (count % 3 == 0)
                        {
                            <div class="clearfix visible-lg visible-md visible-sm visible-xs"></div>
                        }
                    }
                </div>
                <!-- /store products -->
                <!-- store bottom filter -->
                <div class="store-filter clearfix">
                    <span class="store-qty">Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</span>
                    @Html.PagedListPager(Model, page => Url.Action("Store",
                             new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
                </div>
                <!-- /store bottom filter -->
            </div>
            <!-- /STORE -->
        </div>
        <!-- /row -->
    </div>
    <!-- /container -->
</div>
<!-- /SECTION -->

<script>
    // JavaScript to handle changing page size
    document.getElementById('pageSizeSelect').addEventListener('change', function () {
        var selectedValue = this.value;
        // Redirect to the same page with updated page size
        var currentUrl = window.location.href;
        var updatedUrl = updateQueryStringParameter(currentUrl, 'pageSize', selectedValue);
        window.location.href = updatedUrl;
    });

    function updateQueryStringParameter(uri, key, value) {
        var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
        var separator = uri.indexOf('?') !== -1 ? "&" : "?";
        if (uri.match(re)) {
            return uri.replace(re, '$1' + key + "=" + value + '$2');
        }
        else {
            return uri + separator + key + "=" + value;
        }
    }
</script>
